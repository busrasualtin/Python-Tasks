# Data Visualization
# Your manager wants you to provide data visualizations for the sales team to help them gain better, useful insights.

# Importing Libraries
# First, you need to import the required libraries.
# ðŸ“Œ Import the Matplotlib and Pandas libraries.
import pandas as pd
import matplotlib.pyplot as plt

# Before focusing on your task, first practice the Matplotlib basics.
# ðŸ“Œ Create example data:
# A list for the x-axis values
# A list for the y-axis values
x = [0, 2, 4, 6, 8, 10, 12, 14, 16]
y = [0, 4, 16, 36, 64, 100, 144, 196, 256]

# Use this simple data to explore some of the different graph types.
# ðŸ“Œ Use the .plot() function of Matplotlib to create a line plot.
# Use the .title() method to add the title "Example data - Line plot".
# ðŸ“Œ Use plt.show() to display the plot.
plt.plot(x, y)
plt.title("Example Data - Line Plot")
plt.show()

# Next, use the same data to create a scatter plot.
# ðŸ“Œ Use the .scatter() function of Matplotlib to create a scatter plot.
# Use the .title() method to add the title "Example data - Scatter plot".
# ðŸ“Œ Use plt.show() to display the plot.
plt.scatter(x, y)
plt.title("Example Data - Scatter Plot")
plt.show()

# Lastly, use the same data to create a bar chart.
# ðŸ“Œ Use the .bar() function of Matplotlib to create a bar chart.
# Use the .title() method to add the title "Example data - Bar chart".
# ðŸ“Œ Use plt.show() to display the chart.
plt.bar(x, y)
plt.title("Example Data - Bar Chart")
plt.show()

# You decide that you would like to see the graphs side by side.
# Each graph should have a different color to make the figure more readable.
# ðŸ“Œ Use the .figure() function of Matplotlib and its argument "figsize" to create a figure object of the size 18x5.
# ðŸ“Œ Use the .add_subplot() method to add the three graphs you just created to the figure and add a title to each.
# There should be 1 row with the 3 graphs.
# Use the "color" argument to change the color of each plot:

# Line plot: red
# Scatter plot: green
# Bar chart: orange
#Create a figure object of the size 18x5
fig = plt.figure(figsize=(18, 5))

#Use the .add_subplot() method to add the line plot
first_plot = fig.add_subplot(1,3,1)
#Change the color to red
first_plot.plot(x, y, color="red")
#Add the title
first_plot.set_title("Example Data - Line Plot")

#Use the .add_subplot() method to add the scatter plot
second_plot = fig.add_subplot(1,3,2)
#Change the color to green
second_plot.scatter(x, y, color="green")
#Add the title
second_plot.set_title("Example Data - Scatter Plot")

#Use the .add_subplot() method to add the bar chart
third_plot = fig.add_subplot(1,3,3)
#Change the color to orange
third_plot.bar(x, y, color="orange")
#Add the title
third_plot.set_title("Example Data - Bar Chart")
#Display the figure
plt.show()

# Visualization of the sales report
# Now, you are prepared to take on your task.
# The sales team is creating a report and they need a visualization of the results.
# Your manager Rachel asks you to create some graphs so people reviewing the report will have a better understanding of the data.
# They deliver you a .csv file that contains the sales data.
# Data Preparation
# First you need to get the data from the .csv file.

# ðŸ“Œ Use the .read_csv() function to read "employee_performance.csv" and assign it to the variable "data".
# ðŸ“Œ Use the .head() function to check what the dataset contains.
data = pd.read_csv("employee_performance.csv")
data.head()

# First you create some insights about the education level of sales team and you decide that a pie chart will be useful.
# You need to determine the number of people in the different categories.
# ðŸ“Œ Use the .value_counts() function to determine the number of people in the different categories.
educational_level = data["Education"].value_counts()
educational_level

# Then, create a pie chart with the labels "College", "High School", "University"
# ðŸ“Œ Use the .pie() function to create a pie chart and the "labels" argument, to give the indexes of the Pandas Series as labels.
plt.pie(educational_level, labels = educational_level.index)
plt.show()

# Next, you need to create a bar chart of the revenue generated by the employees.
# The names should be on the x-axis and revenues on the y-axis.
# ðŸ“Œ Use the .bar() function to create a bar chart of the revenue values.
plt.bar(data["Name"], data["Revenue"])
plt.show()

# The graph, in this state, just shows a comparison between employees.
# You decide to add the data "Number of calls" in the graph to increase the understandability.
# ðŸ“Œ Add the data for "Revenue" as well as for "Number of calls" to the bar chart. Use the argument "label" to label the data.
# To differentiate between the data, you need to add a legend. Also adding grid lines will be useful.
# ðŸ“Œ Add a legend by using the .legend() function and the .grid() function to add grid lines.
#Create a bar chart with the data "Revenue" and "Number of calls"
plt.bar(data["Name"], data["Revenue"], label="Revenues")
plt.bar(data["Name"], data["Number of Calls"], label="Number of calls")
#Add a legend
plt.legend()
#Add grid lines
plt.grid()
#Display the chart
plt.show()